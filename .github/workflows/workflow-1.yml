name: Build, test and publish Docker image

on:
  push:
  pull_request:
    branches:
      - main


# Set environment variables for pushing Docker image to GitHub Container Registry .
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  # run unit tests
  unittest:
    runs-on: ubuntu-latest

    #Set up MySQL services:
    services:
      MysqlDB:
        image: mysql/mysql-server:8.0.25
        env:
          MYSQL_ROOT_PASSWORD: rootpw123
          MYSQL_DATABASE: birdwatchdb
          MYSQL_USER: birduser
          MYSQL_PASSWORD: birdpassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3



    steps:

      # Checks-out the repository
      - uses: actions/checkout@v3

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Run unit tests
      - name: Run UnitTests
        run: ./gradlew test
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/birdwatchdb?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
          SPRING_DATASOURCE_USERNAME: ${MYSQL_USER:birduser}
          SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD:birdpassword}

      # Upload artifact to use in the next job
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: jar
          path: build/libs/birdwatch-0.0.1-SNAPSHOT.jar


  # Download jar and run integration tests
  integrationtests:

    needs: unittest
    runs-on: ubuntu-latest

    #Set up MySQL services:
    services:
      MysqlDB:
        image: mysql/mysql-server:8.0.25
        env:
          MYSQL_ROOT_PASSWORD: rootpw123
          MYSQL_DATABASE: birdwatchdb
          MYSQL_USER: birduser
          MYSQL_PASSWORD: birdpassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3


    steps:

      # Checks-out the repository
      - uses: actions/checkout@v3

      # Cache the gradle dependencies and wrapper to speed up the build
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # Download jar from previous job
      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          name: jar

      # Run jar in the background to be able to run integration tests in the next step
      - name: run jar
        run: java -jar birdwatch-0.0.1-SNAPSHOT.jar &

      # Run integration tests
      - name: run integration test
        run: ./gradlew integrationTest



  # Build Jar
  buildJar:
    needs: integrationtests
    runs-on: ubuntu-latest

    #Set up MySQL services:
    services:
      MysqlDB:
        image: mysql/mysql-server:8.0.25
        env:
          MYSQL_ROOT_PASSWORD: rootpw123
          MYSQL_DATABASE: birdwatchdb
          MYSQL_USER: birduser
          MYSQL_PASSWORD: birdpassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3



    steps:

      # Checks-out the repository
      - uses: actions/checkout@v3

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Run build, exclude testing since already done
      - name: build
        run: ./gradlew build -x test
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/birdwatchdb?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
          SPRING_DATASOURCE_USERNAME: ${MYSQL_USER:birduser}
          SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD:birdpassword}

      # Upload artifact to use in the next job
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: jar
          path: build/libs/birdwatch-0.0.1-SNAPSHOT.jar


  # Build Docker image and push to GitHub Container Registry
  publish:
    needs: buildJar
    runs-on: ubuntu-latest

    # Set output variable for tag, to be used in the next job
    outputs:
      tag: ${{ steps.output.outputs.tag }}

    # Set permissions for pushing Docker image to GitHub Container Registry
    permissions:
      contents: read
      packages: write

    steps:

      # Checks-out the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Download jar from previous job to use in Docker image
      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          name: jar

      # Move jar to build folder to match path in Dockerfile
      - name: create folder and move jar
        run: |
          mkdir build
          mkdir build/libs
          mv birdwatch-0.0.1-SNAPSHOT.jar build/libs

      # Log in to the Container registry
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for Docker to use when building and pushing image
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Output tag to be used in the next job
      - name: output tag
        id: output
        run: echo "tag=${{ steps.meta.outputs.tags }}" >> "$GITHUB_OUTPUT"

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Fake deployment job
  deploy:
    needs: publish
    runs-on: ubuntu-latest

    # Use output variable from previous job to display image name and tag
    steps:
      - name: Echo deployment image
        run: echo ${{needs.publish.outputs.tag}}